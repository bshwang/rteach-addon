"""
Scissor‑EE Solver (UI Panel + Buttons) – fixed EE snap
"""
import bpy
from mathutils import Vector

# -------------------------------------------------------------------------
# Core logic
# -------------------------------------------------------------------------
def scissor_ee_update(scene):
    try:
        arm       = bpy.data.objects["Rig_scissor"]
        ground    = bpy.data.objects["ground"]
        ee        = bpy.data.objects["end_effector"]
        ref_clamp = bpy.data.objects["ref_clamp"]
        target    = bpy.data.objects.get("target")

        if target is None:
            print("[Scissor Solve] ⚠️  'target' object not found")
            return

        print("\n[SCISSOR SOLVE] ===== PRE‑STATE =====")
        print(f"EE parent            : {ee.parent.name if ee.parent else 'None'}")
        print(f"EE world loc BEFORE  : {ee.matrix_world.translation}")
        if ee.parent:
            parent_mw = ee.parent.matrix_world @ ee.matrix_parent_inverse
            ee_local_pre = parent_mw.inverted() @ ee.matrix_world
            print(f"EE local loc BEFORE  : {ee_local_pre.to_translation()}")

        print(f"Target world loc     : {target.matrix_world.translation}")

        # 1. Clamp 회전 계산
        v1 = (ref_clamp.matrix_world.translation -
              ground.matrix_world.translation)
        v2 = (target.matrix_world.translation -
              ref_clamp.matrix_world.translation)

        rot = v1.normalized().rotation_difference(v2.normalized())
        eul = rot.to_euler('ZYX')

        print(f"[Clamp Rotation] v1: {v1} / v2: {v2}")
        print(f"[Clamp Rotation] Euler ZYX (Yaw Pitch Roll): "
              f"{eul.z:.3f}, {eul.y:.3f}, {eul.x:.3f}")

        # Clamp 회전 적용
        pb_yaw   = arm.pose.bones["clamp_yaw"];   pb_yaw.rotation_mode   = 'XYZ'
        pb_pitch = arm.pose.bones["clamp_pitch"]; pb_pitch.rotation_mode = 'XYZ'
        pb_roll  = arm.pose.bones["clamp_roll"];  pb_roll.rotation_mode  = 'XYZ'

        pb_yaw.rotation_euler   = (0.0, 0.0, eul.z)
        pb_pitch.rotation_euler = (0.0, 0.0, eul.y)
        pb_roll.rotation_euler  = (0.0, eul.x, 0.0)

        print("[Clamp Applied] yaw:", pb_yaw.rotation_euler)
        print("[Clamp Applied] pitch:", pb_pitch.rotation_euler)
        print("[Clamp Applied] roll:", pb_roll.rotation_euler)

        # 2. Handle 이동 (EE delta * SCALE)
        pb_handle = arm.pose.bones["handle"]
        ee_current = ee.matrix_world.translation
        ee_target = target.matrix_world.translation
        ee_delta = ee_target - ee_current

        SCALE = 0.15
        handle_world_pos = (arm.matrix_world @ pb_handle.matrix).to_translation()
        handle_new_pos = handle_world_pos + ee_delta * SCALE

        handle_mat = (arm.matrix_world @ pb_handle.matrix).copy()
        handle_mat.translation = handle_new_pos
        pb_handle.matrix = arm.matrix_world.inverted() @ handle_mat

        print("[Handle] EE Δ :", ee_delta, f"(len={ee_delta.length:.4f} m)")
        print("[Handle] Moved by scaled Δ:", ee_delta * SCALE)
        print("[Handle] New world pos:", handle_new_pos)

        bpy.context.view_layer.update()

        # ─────────────────────────────────────────────
        # 3. EE 스냅 – local & world 둘 다 보존
        # ─────────────────────────────────────────────
        saved_parent = ee.parent
        saved_local  = ee.matrix_local.copy()          # 원래 local
        target_world = target.matrix_world.copy()

        # 1) 부모 잠시 끊고 world 스냅
        if saved_parent:
            ee.parent = None
            bpy.context.view_layer.update()

        ee.matrix_world = target_world
        bpy.context.view_layer.update()

        # 2) 부모 복구 + matrix_parent_inverse 재계산
        if saved_parent:
            ee.parent = saved_parent
            parent_world = saved_parent.matrix_world
            ee.matrix_parent_inverse = (
                parent_world.inverted() @ target_world @ saved_local.inverted()
            )
            ee.matrix_local = saved_local                # 안전하게 로컬 값 복원

        # 디버그 출력
        print("[SCISSOR SOLVE] ===== POST‑STATE =====")
        print(f"EE world loc AFTER   : {ee.matrix_world.translation}")
        if ee.parent:
            parent_mw = ee.parent.matrix_world @ ee.matrix_parent_inverse
            ee_local_post = parent_mw.inverted() @ ee.matrix_world
            print(f"EE local loc AFTER   : {ee_local_post.to_translation()}")

        diff = ee.matrix_world.translation - target.matrix_world.translation
        print(f"Δ EE‑Target world     : {diff} (len={diff.length:.6f} m)")

        # j1~j3
        for jname in ["j1", "j2", "j3"]:
            if jname in arm.pose.bones:
                pb = arm.pose.bones[jname]
                pos = (arm.matrix_world @ pb.head)
                quat = pb.matrix.to_quaternion()
                print(f"[{jname}] world pos: {pos} | rot_quat: {quat}")

        # Copy-rot 본들
        for jname in ["j4", "j5", "j16", "j17"]:
            if jname in arm.pose.bones:
                pb = arm.pose.bones[jname]
                pos = (arm.matrix_world @ pb.head)
                print(f"[{jname}] (copy-rot) world pos: {pos} | rot_euler: {pb.rotation_euler[:]}")

    except KeyError as e:
        print(f"[Scissor Solve] Missing object or bone: {e}")

# -------------------------------------------------------------------------
# Handler utils
# -------------------------------------------------------------------------
_HANDLER_TAG = "SCISSOR_EE_HANDLER"

def add_handler():
    if not any(getattr(h, "__tag__", "") == _HANDLER_TAG
               for h in bpy.app.handlers.frame_change_post):
        def _wrapper(scene):
            scissor_ee_update(scene)
        _wrapper.__tag__ = _HANDLER_TAG
        bpy.app.handlers.frame_change_post.append(_wrapper)

def remove_handler():
    bpy.app.handlers.frame_change_post[:] = [
        h for h in bpy.app.handlers.frame_change_post
        if getattr(h, "__tag__", "") != _HANDLER_TAG
    ]

def is_handler_active():
    return any(getattr(h, "__tag__", "") == _HANDLER_TAG
               for h in bpy.app.handlers.frame_change_post)

# -------------------------------------------------------------------------
# Operators
# -------------------------------------------------------------------------
class OBJECT_OT_scissor_ee_solve(bpy.types.Operator):
    bl_idname = "object.scissor_ee_solve"
    bl_label = "Solve Scissor EE (once)"
    bl_options = {'REGISTER', 'UNDO'}

    @classmethod
    def poll(cls, context):
        return context.area.type == 'VIEW_3D'

    def execute(self, context):
        scissor_ee_update(context.scene)
        return {'FINISHED'}

class OBJECT_OT_scissor_ee_toggle_auto(bpy.types.Operator):
    bl_idname = "object.scissor_ee_toggle_auto"
    bl_label = "Toggle Auto Solve"

    @classmethod
    def poll(cls, context):
        return context.area.type == 'VIEW_3D'

    def execute(self, context):
        if is_handler_active():
            remove_handler()
            self.report({'INFO'}, "Auto Solve OFF")
        else:
            add_handler()
            self.report({'INFO'}, "Auto Solve ON")
        return {'FINISHED'}

# -------------------------------------------------------------------------
# UI Panel
# -------------------------------------------------------------------------
class VIEW3D_PT_scissor_solver(bpy.types.Panel):
    bl_label = "Scissor Solver"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Scissor'

    def draw(self, context):
        layout = self.layout
        col = layout.column(align=True)
        col.operator("object.scissor_ee_solve", icon="PLAY")
        col.operator("object.scissor_ee_toggle_auto", icon="FILE_REFRESH")
        col.label(text=f"Auto Solve: {'ON' if is_handler_active() else 'OFF'}")

# -------------------------------------------------------------------------
# Register
# -------------------------------------------------------------------------
classes = (
    OBJECT_OT_scissor_ee_solve,
    OBJECT_OT_scissor_ee_toggle_auto,
    VIEW3D_PT_scissor_solver,
)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)

def unregister():
    remove_handler()
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)

if __name__ == "__main__":
    register()
